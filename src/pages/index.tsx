import Head from 'next/head';
import { Lato } from 'next/font/google';
import styles from '@/styles/Home.module.css';
import { BaseSyntheticEvent, useEffect, useRef, useState } from 'react';
import { WeatherProps } from '@/types/weather.types';
import { WeatherIcon } from '@/components/WeatherIcon';

// Icons
import { BsClouds, BsDropletHalf, BsWind } from 'react-icons/bs';
import { BiSearchAlt } from 'react-icons/bi';

const lato = Lato({ subsets: ['latin'], weight: '400' });

export default function Home() {
  const [search, setSearch] = useState<string | undefined>('');
  const [loc, setLoc] = useState({ lat: 44.34, lon: 10.99 });
  const [currentWeather, setCurrentWeather] = useState<WeatherProps>();
  const searchInputRef = useRef<HTMLInputElement>(null);

  const handleSearchIconClick = () => {
    searchInputRef.current?.focus();
  };

  const handleSearchSubmit = (e: BaseSyntheticEvent) => {
    e.preventDefault();

    setSearch(searchInputRef?.current?.value);
  };

  useEffect(() => {
    navigator.geolocation.getCurrentPosition(function (position) {
      console.log(position.coords);
      setLoc({ lat: position.coords.latitude, lon: position.coords.longitude });
    });
  }, []);

  useEffect(() => {
    if (!loc) {
      return;
    }
    const fetchData = async () => {
      const response = await fetch(
        `/api/currentWeather?lat=${loc.lat}&lon=${loc.lon}`
      );
      const data = await response.json();

      if (data) {
        setCurrentWeather(data);
      }
    };

    fetchData();
  }, [loc]);

  useEffect(() => {
    if (!search) {
      return;
    }
    const fetchData = async () => {
      const response = await fetch(`/api/geoLocation?search=${search}`);
      const data = await response.json();

      if (data) {
        setLoc({ lat: data.lat, lon: data.lon });
      }
    };

    fetchData();
  }, [search]);

  return (
    <>
      <Head>
        <title>React Weather API App</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1"
        />
        <link
          rel="icon"
          href="/favicon.ico"
        />
      </Head>
      <main className={`${styles.main} ${lato.className}`}>
        <div className={styles.weather_container}>
          <div className={styles.top_bar}>
            <div className={styles.location}>
              <p>{currentWeather?.location}</p>
            </div>
            <div className={styles.search_container}>
              <form onSubmit={(e) => handleSearchSubmit(e)}>
                <input
                  className={styles.search_input}
                  ref={searchInputRef}
                  type="text"
                  placeholder="search"
                  // value={search}
                  // onChange={() => setSearch(searchInputRef?.current?.value)}
                />
              </form>
              <button
                className={styles.search_icon}
                onClick={handleSearchIconClick}
              >
                <BiSearchAlt size="1.5rem" />
              </button>
            </div>
          </div>
          <div className={styles.weather_type_container}>
            <WeatherIcon id={currentWeather?.weatherId} />
            <p>{currentWeather?.weatherType}</p>
            <ul className={styles.day_selection_list}>
              <li className={`${styles.day} ${styles.day_active}`}>
                <button>S</button>
              </li>
              <li className={`${styles.day}`}>
                <button>M</button>
              </li>
              <li className={`${styles.day}`}>
                <button>T</button>
              </li>
              <li className={`${styles.day}`}>
                <button>W</button>
              </li>
              <li className={`${styles.day}`}>
                <button>T</button>
              </li>
              <li className={`${styles.day}`}>
                <button>F</button>
              </li>
              <li className={`${styles.day}`}>
                <button>S</button>
              </li>
            </ul>
          </div>
          <div className={styles.weather_info_container}>
            <div className={styles.weather_detail_wrapper}>
              <div className={styles.weather_detail}>
                <BsWind />
                <p>{currentWeather?.windSpeed}</p>
              </div>
              <div className={styles.weather_detail}>
                <BsDropletHalf />
                <p>{currentWeather?.humidity}</p>
              </div>
              <div className={styles.weather_detail}>
                <BsClouds />
                <p>{currentWeather?.clouds}</p>
              </div>
            </div>
            <div className={styles.temperature}>
              {currentWeather?.currentTemp}
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
