import Head from 'next/head';
import { Lato } from 'next/font/google';
import styles from '@/styles/Home.module.css';
import { BaseSyntheticEvent, useEffect, useRef, useState } from 'react';
import { WeatherProps } from '@/types/weather.types';
import { WeatherIcon } from '@/components/WeatherIcon';

// Icons
import { BsClouds, BsDropletHalf, BsWind } from 'react-icons/bs';
import { BiSearchAlt } from 'react-icons/bi';
import { GeoLocationProps } from '@/types/geoLocation.types';
import TopBar from '@/components/TopBar/TopBar';
import { Container } from '@/components/UI/Container';

const lato = Lato({ subsets: ['latin'], weight: '400' });

export default function Home() {
  const [search, setSearch] = useState<string | undefined>('');
  const [loc, setLoc] = useState({ lat: 44.34, lon: 10.99 });
  const [currentWeather, setCurrentWeather] = useState<WeatherProps>();
  const [searchLocations, setSearchLocations] = useState<GeoLocationProps[]>(
    []
  );
  const searchInputRef = useRef<HTMLInputElement>(null);

  const handleSearchIconClick = () => {
    searchInputRef.current?.focus();
  };

  const handleSearchSubmit = (e: BaseSyntheticEvent) => {
    e.preventDefault();

    setSearch(searchInputRef?.current?.value);
  };

  const handleLocationClick = ({ lat, lon }: { lat: number; lon: number }) => {
    if (searchInputRef.current) {
      searchInputRef.current.value = '';
    }

    setSearchLocations([]);
    setLoc({ lat, lon });
  };

  useEffect(() => {
    navigator.geolocation.getCurrentPosition(function (position) {
      setLoc({ lat: position.coords.latitude, lon: position.coords.longitude });
    });
  }, []);

  useEffect(() => {
    if (!loc) {
      return;
    }
    const fetchData = async () => {
      const response = await fetch(
        `/api/currentWeather?lat=${loc.lat}&lon=${loc.lon}`
      );
      const data = await response.json();

      if (data) {
        setCurrentWeather(data);
      }
    };

    fetchData();
  }, [loc]);

  useEffect(() => {
    if (!search) {
      return;
    }
    const fetchData = async () => {
      const response = await fetch(`/api/geoLocation?search=${search}`);
      const data = await response.json();

      if (data) {
        setSearchLocations(data);
      }
    };

    fetchData();
  }, [search]);

  return (
    <>
      <Head>
        <title>React Weather API App</title>
        <meta
          name="description"
          content="Generated by create next app"
        />
        <meta
          name="viewport"
          content="width=device-width, initial-scale=1"
        />
        <link
          rel="icon"
          href="/favicon.ico"
        />
      </Head>
      <Container>
        <TopBar />
      </Container>
      {/* <main className={`${styles.main}`}>
        <div className={styles.weather_container}>
          <form
            className={styles.weather_form}
            onSubmit={(e) => handleSearchSubmit(e)}
          >
            <div className={styles.form_top_bar}>
              <span>{currentWeather?.location}</span>
              <input
                type="text"
                ref={searchInputRef}
                placeholder="Search by City"
              />
            </div>
            {!!searchLocations && (
              <ul className={styles.search_return_container}>
                {searchLocations.map((loc, idx) => {
                  return (
                    <li
                      key={idx}
                      onClick={() =>
                        handleLocationClick({
                          lat: loc.latitude,
                          lon: loc.longitude,
                        })
                      }
                    >
                      {loc.name}, {loc.countryCode}
                    </li>
                  );
                })}
              </ul>
            )}
          </form>
          <div className={styles.weather_type_container}>
            <WeatherIcon id={currentWeather?.weatherId} />
            <span>{currentWeather?.weatherType}</span>
          </div>
          <div className={styles.weather_info_container}>
            <ul className={styles.weather_info}>
              <li>
                <BsWind />{' '}
                <span>
                  {currentWeather?.windSpeed}
                  <small>m/s</small>
                </span>
              </li>
              <li>
                <BsDropletHalf />{' '}
                <span>
                  {currentWeather?.humidity}
                  <small>%</small>
                </span>
              </li>
              <li>
                <BsClouds />{' '}
                <span>
                  {currentWeather?.clouds}
                  <small>%</small>
                </span>
              </li>
            </ul>
            <div className={styles.weather_temperature}>
              {currentWeather?.currentTemp} <pre>Â°C</pre>
            </div>
          </div>
          <ul className={styles.day_selection_list}>
            <li className={`${styles.day} ${styles.day_active}`}>
              <button>Sun</button>
            </li>
            <li className={`${styles.day}`}>
              <button>Mon</button>
            </li>
            <li className={`${styles.day}`}>
              <button>Tue</button>
            </li>
            <li className={`${styles.day}`}>
              <button>Wed</button>
            </li>
            <li className={`${styles.day}`}>
              <button>Thur</button>
            </li>
            <li className={`${styles.day}`}>
              <button>Fri</button>
            </li>
            <li className={`${styles.day}`}>
              <button>Sat</button>
            </li>
          </ul>
        </div>
      </main> */}
    </>
  );
}
